f_points   <- f[grep("point", tolower(st_geometry_type(f))), ] %>% st_geometry
f_lines    <- f[grep("line", tolower(st_geometry_type(f))), ] %>% st_geometry
f_polygons <- f[grep("polygon", tolower(st_geometry_type(f))), ] %>% st_geometry
plot(f_points, pch = 16, col="red")
plot(f_lines, add = T, col="black")
plot(f_polygons, add = T)
plot(f_polygons, add = T, lwd = 2)
plot(f_points, pch = 16, col="red")
plot(f_lines, add = T, col="black", lwd=1)
plot(f_polygons, add = T, lwd = 1.2)
plot(f_points, pch = 16, col="red")
plot(f_lines, add = T, col="black", lwd=1)
plot(f_polygons, add = T, lwd = 1.3, col="grey")
plot(f_polygons, lwd = 1.3, col="grey")
plot(f_points, add = T, pch = 16, col="red")
plot(f_lines, add = T, col="black", lwd=1)
plot(f_polygons, lwd = 0, col="grey")
plot(f_points, add = T, pch = 16, col="red")
plot(f_lines, add = T, col="black", lwd=1)
plot(f_polygons, lwd = 1, col="grey")
plot(f_points, add = T, pch = 16, col="red")
plot(f_lines, add = T, col="black", lwd=1)
plot(f_polygons, lwd = 1, col="grey", border = NULL)
plot(f_polygons, lwd = 1, col="grey", border = NA)
plot(f_points, add = T, pch = 16, col="red")
plot(f_lines, add = T, col="black", lwd=1)
plot(f_polygons, lwd = 1, col="grey", border = "grey")
plot(f_points, add = T, pch = 16, col="red")
plot(f_lines, add = T, col="black", lwd=1)
plot(f_polygons, lwd = 1, col="grey", border = NA)
plot(f_points, add = T, pch = 16, col="red")
plot(f_lines, add = T, col="black", lwd=1)
plot(f_points, add = T, pch = 16, col="red", border = "white")
plot(f_polygons, lwd = 1, col="grey", border = NA)
plot(f_points, add = T, pch = 16, col="red", border = "white")
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, pch = 16, col="red", border = "white")
plot(f_points, pch = 16, col="red", border = "black")
plot(f_points, col=3, bg=2, pch=23)
plot(f_points, col=3, bg=2, pch=16)
plot(f_points, col=3, bg=2, pch=23)
plot(f_points, col=3, bg=2, pch=21)
plot(f_points, col=3, bg="white", pch=21)
plot(f_points, col="white", bg="black", pch=21)
plot(f_polygons, lwd = 1, col="grey", border = NA)
plot(f_points, add = T, col="white", bg="black", pch=21)
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_polygons, lwd = 1, col="grey", border = NA)
plot(f_points, add = T, col="white", bg="red", pch=21)
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_polygons, lwd = 1, col="grey", border = NA)
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
plot(f_polygons, lwd = 1, col="#fffae3", border = NA)
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
plot(f_polygons, lwd = 1, col="#f0efeb", border = NA)
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
plot(f_polygons, lwd = 1, col="#d9d8d4", border = NA)
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA)
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
f_points
as_spatial(df)
as_spatial(df, geom_col = "X_GEOM_WKT")
as_spatial(df, geom_col = "X_GEOM_WKT") -> df
df
as_spatial(df, geom_col = "X_GEOM_WKT") -> f
f_points   <- f[grep("point", tolower(st_geometry_type(f))), ] %>% st_geometry
f_lines    <- f[grep("line", tolower(st_geometry_type(f))), ] %>% st_geometry
f_polygons <- f[grep("polygon", tolower(st_geometry_type(f))), ] %>% st_geometry
f_points
df
df$X_GEOM_WKT
grep("POINT", df$X_GEOM_WKT)
# w <- which(df[[geom_col]] != "" | df[[geom_col]] == "N/C" | df[[geom_col]] == "NA" | is.na(df[[geom_col]]))
w <- grep("^(point|multipoint|line|multiline|polygon|multipolygon|geometry)", tolower(df[[geom_col]]))
# On met une géométrie vide si pas de géométrie pour la ligne
df[[geom_col]][-w] <- "POINT EMPTY"
st_geometry(df) <- st_as_sfc(df[[geom_col]])
grep("POINT", df$X_GEOM_WKT)
class(df)
which(st_geometry_type(df == "POINT"))
which(st_geometry_type(df) == "POINT"))
which(st_geometry_type(df) == "POINT")
grep("point", tolower(st_geometry_type(f)))
f = df
f[grep("point", tolower(st_geometry_type(f))), ]
f_points   <- f[grep("point", tolower(st_geometry_type(f))), ] %>% st_geometry
f_points
f_lines    <- f[grep("line", tolower(st_geometry_type(f))), ] %>% st_geometry
f_polygons <- f[grep("polygon", tolower(st_geometry_type(f))), ] %>% st_geometry
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA)
n_empty <- which(st_is_empty(f_points)) %>% length
n_empty
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
title(main = titre, sub = sousTitre)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
sousTitre
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA)
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
mtext(side=3, line=2, at=-0.07, adj=0, cex=0.7, sousTitre)
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, main="Titre principal",
xlab="Titre de l'axe des x",
ylab="Titre de l'axe des y",
sub="Sous-titre")
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
jpeg(filename = "outputs/cassis.jpeg")
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, )
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
bb <- st_bbox(f)
names(bb)
jpeg(filename = "outputs/cassis.jpeg")
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, xlim=c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
jpeg(filename = "outputs/cassis.jpeg", width=400)
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, xlim=c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
jpeg(filename = "outputs/cassis.jpeg", width=1000)
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, xlim=c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
ratio <- (bb$xmin - bb$xmax) / (bb$ymin - bb$ymax)
ratio
ratio <- abs(bb$ymin - bb$ymax) / abs(bb$xmin - bb$xmax)
ratio
width <- 2000
jpeg(filename = "outputs/cassis.jpeg", width=width, height = width*ratio)
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, xlim=c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
width <- 1200
jpeg(filename = "outputs/cassis.jpeg", width=width, height = width*ratio)
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, xlim=c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
inputCSV
f <- read_arrete(inputCSV) %>% as_spatial(geom_col = geomCol)
getwd()
setwd("notebooks")
f <- read_arrete(inputCSV) %>% as_spatial(geom_col = geomCol)
f
outputJPEG <- "../outputs/cassis.jpeg"
d_arrete(inputCSV) %>% as_spatial(geom_col = geomCol)
# Points, lignes et polygones
f_points   <- f[grep("point", tolower(st_geometry_type(f))), ] %>% st_geometry
n_empty <- which(st_is_empty(f_points)) %>% length
f_lines    <- f[grep("line", tolower(st_geometry_type(f))), ] %>% st_geometry
f_polygons <- f[grep("polygon", tolower(st_geometry_type(f))), ] %>% st_geometry
# Largeur et hauteur
bb <- st_bbox(f)
ratio <- abs(bb$ymin - bb$ymax) / abs(bb$xmin - bb$xmax)
# Export
width <- 1200
jpeg(filename = "outputs/cassis.jpeg", width=width, height = width*ratio)
# Eléments cartos
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, xlim=c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
# Titre et sous-titre
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
jpeg(filename = outputJPEG, width=width, height = width*ratio)
# Eléments cartos
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, xlim=c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
# Titre et sous-titre
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
inputCSV
outputJPEG
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1200,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1200,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1000,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1000,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 800,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1000,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 800,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
outputJPEG = "../outputs/cassis.jpeg",
width = 800)
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
outputJPEG = "../outputs/cassis.jpeg",
width = 800)
source("../functions/functions.R", encoding = "UTF-8")
CSV2JPEG(
inputCSV   = "../data/arrete-cassis-geo2.csv",
geomCol    = "X_GEOM_WKT",
outputJPEG = "../outputs/cassis.jpeg",
width      = 800)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("helpers/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("helpers/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("helpers/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("helpers/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("helpers/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("helpers/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("helpers/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("helpers/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("helpers/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("helpers/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/functions/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/functions/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/functions/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/functions/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
