sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
inputCSV
f <- read_arrete(inputCSV) %>% as_spatial(geom_col = geomCol)
getwd()
setwd("notebooks")
f <- read_arrete(inputCSV) %>% as_spatial(geom_col = geomCol)
f
outputJPEG <- "../outputs/cassis.jpeg"
d_arrete(inputCSV) %>% as_spatial(geom_col = geomCol)
# Points, lignes et polygones
f_points   <- f[grep("point", tolower(st_geometry_type(f))), ] %>% st_geometry
n_empty <- which(st_is_empty(f_points)) %>% length
f_lines    <- f[grep("line", tolower(st_geometry_type(f))), ] %>% st_geometry
f_polygons <- f[grep("polygon", tolower(st_geometry_type(f))), ] %>% st_geometry
# Largeur et hauteur
bb <- st_bbox(f)
ratio <- abs(bb$ymin - bb$ymax) / abs(bb$xmin - bb$xmax)
# Export
width <- 1200
jpeg(filename = "outputs/cassis.jpeg", width=width, height = width*ratio)
# Eléments cartos
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, xlim=c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
# Titre et sous-titre
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
jpeg(filename = outputJPEG, width=width, height = width*ratio)
# Eléments cartos
plot(f_polygons, lwd = 1, col="#e3e2de", border = NA, xlim=c(bb$xmin, bb$xmax), ylim=c(bb$ymin, bb$ymax))
plot(f_lines, add = T, col="black", lwd = 1)
plot(f_points, add = T, col="white", bg="red", pch=21)
# Titre et sous-titre
COLL_NOM <- head(f$COLL_NOM, 1)
COLL_INSEE <- head(f$COLL_INSEE, 1)
titre <- glue("{COLL_NOM}({COLL_INSEE})")
sousTitre <- glue("{n_empty} éléments sans référence géométrique")
title(main = titre, sub = sousTitre)
dev.off()
inputCSV
outputJPEG
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1200,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1200,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1000,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1000,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 800,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 1000,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
width = 800,
outputJPEG = "../outputs/cassis.jpeg")
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
outputJPEG = "../outputs/cassis.jpeg",
width = 800)
source("../helpers/main.R", encoding = "UTF-8")
export_snapshot(
inputCSV = "../data/arrete-cassis-geo2.csv",
geomCol = "X_GEOM_WKT",
outputJPEG = "../outputs/cassis.jpeg",
width = 800)
source("../functions/functions.R", encoding = "UTF-8")
CSV2JPEG(
inputCSV   = "../data/arrete-cassis-geo2.csv",
geomCol    = "X_GEOM_WKT",
outputJPEG = "../outputs/cassis.jpeg",
width      = 800)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("helpers/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("helpers/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("helpers/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("helpers/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("helpers/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("helpers/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("helpers/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("helpers/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("helpers/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("helpers/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/functions/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/functions/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/functions/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/functions/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
library(tidyverse)
library(sf)
source("load-libraries.R", encoding = "UTF-8")
source("../functions/functions.R", encoding = "UTF-8")
source("../functions/geocode.R", encoding = "UTF-8")
source("../functions/markdown.R", encoding = "UTF-8")
source("../functions/opening-hours.R", encoding = "UTF-8")
source("../functions/imports/groum-groum/functions.R", encoding = "UTF-8")
f <- read_arrete("../data/arrete-cassis-geo4.csv")
df <- read_arrete("../data/arrete-cassis-geo4.csv")
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
class(f)
st_geometry_type(f) %>% table
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
class(f)
nrow(f)
st_geometry_type(f) %>% table
f_lines <- f[grep("LINESTRING", st_geometry_type(f))]
f_lines    <- f[grep("LINESTRING", st_geometry_type(f)), ]
f_points   <- f[grep("POINT", st_geometry_type(f)), ]
f_polygons <- f[grep("POLYGON", st_geometry_type(f)), ]
st_write(f_lines, "../outputs/arrete-cassis.geojson", layer = "lines")
st_write(f_points, "../outputs/arrete-cassis.geojson", layer = "points", append = T)
st_write(f, "../outputs/arrete-cassis2.geojson")
f %>% filter(EMPRISE_DESIGNATION == "N/C")
f %>% filter(GEOM_WKT == "N/C")
f %>% filter(GEOM_WKT == "")
f %>% filter(is.na(GEOM_WKT))
nrow(f)
names(f)
unique(f$GEOM_WKT)
grep("EMPTY", st_as_text(f))
grep("EMPTY", st_as_text(st_geometry(f)))
f_noData <- f[grep("EMPTY", st_as_text(st_geometry(f))), ]
f_noData <- f[grep("EMPTY", st_as_text(st_geometry(f))), ]
f_withData <- f[-grep("EMPTY", st_as_text(st_geometry(f))), ]
f_noData <- f[grep("EMPTY", st_as_text(st_geometry(f))), ] %>% data.frame
f_noData <- f[grep("EMPTY", st_as_text(st_geometry(f))), ] %>% data.frame
f_withData <- f[-grep("EMPTY", st_as_text(st_geometry(f))), ]
class(f_noData)
st_geometry(f_noData) <- NA
getwd()
source("functions/functions.R", encoding = "UTF-8")
source("functions/geocode.R", encoding = "UTF-8")
source("functions/markdown.R", encoding = "UTF-8")
source("functions/opening-hours.R", encoding = "UTF-8")
source("functions/imports/functions.R", encoding = "UTF-8")
source("functions/functions.R", encoding = "UTF-8")
source("functions/geocode.R", encoding = "UTF-8")
source("functions/markdown.R", encoding = "UTF-8")
source("functions/opening-hours.R", encoding = "UTF-8")
source("functions/imports/functions.R", encoding = "UTF-8")
f_debut <- f %>% filter(!is.na(GEOM_DEBUT) & GEOM_DEBUT != "")
f_fin   <- f %>% filter(!is.na(GEOM_FIN) & GEOM_FIN != "")
f_debut
f_fin
coords_debut <- f_debut$GEOM_DEBUT
coords_debut
coords_debut <- f_debut$GEOM_DEBUT
coords_debut <- gsub("[", "", coords_debut)
coords_debut <- gsub("]", "", coords_debut)
coords_debut <- f_debut$GEOM_DEBUT
coords_debut <- gsub("[", "", coords_debut)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]]
coords_debut
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both")
coords_debut
coords_debut <- f_debut$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both")
coords_debut
coords_debut <- f_debut$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both") %>% as.numeric
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both") %>% as.numeric
st_point(coords_debut)
st_geometry(f_debut) <- st_point(coords_debut)
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both") %>% as.numeric
st_geometry(f_debut) <- st_point(coords_debut)
f_debut
st_point(coords_debut)
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
strsplit(coords_debut, ",")
strsplit(coords_debut, ",") %>% trimws(which = "both") %>% as.numeric
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- sapply(1:nrow(coords_debut), function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- sapply(1:nrow(coords_debut), function(x) strsplit(coords_debut[x, ], ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
st_geometry(f_debut) <- st_point(coords_debut)
coords_debut
lapply(coords_debut, function(x) st_point(x))
coords_debut
nrow(coords_debut)
lapply(1:nrow(coords_debut), function(x) st_point(coords_debut[x, ]))
st_sfc(lapply(1:nrow(coords_debut), function(x) st_point(coords_debut[x, ])))
st_geometry(f_debut) <- st_sfc(lapply(1:nrow(coords_debut), function(x) st_point(coords_debut[x, ])))
st_sfc(lapply(1:nrow(coords_debut), function(x) st_point(coords_debut[x, ])))
nrow(f_debut)
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- sapply(1:nrow(coords_debut), function(x) strsplit(coords_debut[x, ], ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- sapply(1:nrow(coords_debut), function(x) strsplit(coords_debut[x, ], ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
coords_debut
sapply(1:nrow(coords_debut), function(x) strsplit(coords_debut[x, ], ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
nrow(coords_debut)
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut
coords_debut <- sapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
coords_debut
lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
coords_debut
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
coords_debut
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
geom_debut <- lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
st_geometry(f_debut) <- geom_debut
geom_debut
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
geom_debut <- lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
st_geometry(f) <- geom_debut
f <- rbind(f_debut, f_debut)
get_points <- function(f, field) {
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
geom <- lapply(coords, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
st_geometry(f) <- geom
return(f)
}
get_points(f, "GEOM_DEBUT")
get_points(f, "GEOM_FIN")
get_points <- function(f, field) {
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
geom <- lapply(coords, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
st_geometry(f) <- geom
return(f)
}
f_debut <- get_points(f, "GEOM_DEBUT")
f_fin <- get_points(f, "GEOM_FIN")
f_debut
