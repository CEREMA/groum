file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
setwd("C:/Users/mathieu.rajerison/Desktop/TAFF_MAISON/GIT/groum")
# Copie des fonctions
file.copy("../groum-groum/src/shinyapp/libraries.R",
file.path("functions/imports", "libraries.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/main.R",
file.path("functions/imports", "main.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/markdown.R",
file.path("functions/imports", "markdown.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/opening-hours.R",
file.path("functions/imports", "opening-hours.R"),
overwrite = T)
file.copy("../groum-groum/src/shinyapp/helpers/geocode.R",
file.path("functions/imports", "geocode.R"),
overwrite = T)
# Copie du schéma
file.copy("../schema-arrete-circulation-marchandises/schema.json",
file.path("data", "schema.json"),
overwrite = T)
# Copie des données
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/3-arrete/arrete-cassis.csv",
file.path("data", "arrete-cassis.csv"),
overwrite = T)
# Copie du JSON de rues
file.copy("../schema-arrete-circulation-marchandises-private/Collectivités/Cassis/13022-Cassis.geojson",
file.path("data", "13022-Cassis.geojson"),
overwrite = T)
library(tidyverse)
library(sf)
source("load-libraries.R", encoding = "UTF-8")
source("../functions/functions.R", encoding = "UTF-8")
source("../functions/geocode.R", encoding = "UTF-8")
source("../functions/markdown.R", encoding = "UTF-8")
source("../functions/opening-hours.R", encoding = "UTF-8")
source("../functions/imports/groum-groum/functions.R", encoding = "UTF-8")
f <- read_arrete("../data/arrete-cassis-geo4.csv")
df <- read_arrete("../data/arrete-cassis-geo4.csv")
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
class(f)
st_geometry_type(f) %>% table
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
class(f)
nrow(f)
st_geometry_type(f) %>% table
f_lines <- f[grep("LINESTRING", st_geometry_type(f))]
f_lines    <- f[grep("LINESTRING", st_geometry_type(f)), ]
f_points   <- f[grep("POINT", st_geometry_type(f)), ]
f_polygons <- f[grep("POLYGON", st_geometry_type(f)), ]
st_write(f_lines, "../outputs/arrete-cassis.geojson", layer = "lines")
st_write(f_points, "../outputs/arrete-cassis.geojson", layer = "points", append = T)
st_write(f, "../outputs/arrete-cassis2.geojson")
f %>% filter(EMPRISE_DESIGNATION == "N/C")
f %>% filter(GEOM_WKT == "N/C")
f %>% filter(GEOM_WKT == "")
f %>% filter(is.na(GEOM_WKT))
nrow(f)
names(f)
unique(f$GEOM_WKT)
grep("EMPTY", st_as_text(f))
grep("EMPTY", st_as_text(st_geometry(f)))
f_noData <- f[grep("EMPTY", st_as_text(st_geometry(f))), ]
f_noData <- f[grep("EMPTY", st_as_text(st_geometry(f))), ]
f_withData <- f[-grep("EMPTY", st_as_text(st_geometry(f))), ]
f_noData <- f[grep("EMPTY", st_as_text(st_geometry(f))), ] %>% data.frame
f_noData <- f[grep("EMPTY", st_as_text(st_geometry(f))), ] %>% data.frame
f_withData <- f[-grep("EMPTY", st_as_text(st_geometry(f))), ]
class(f_noData)
st_geometry(f_noData) <- NA
getwd()
source("functions/functions.R", encoding = "UTF-8")
source("functions/geocode.R", encoding = "UTF-8")
source("functions/markdown.R", encoding = "UTF-8")
source("functions/opening-hours.R", encoding = "UTF-8")
source("functions/imports/functions.R", encoding = "UTF-8")
source("functions/functions.R", encoding = "UTF-8")
source("functions/geocode.R", encoding = "UTF-8")
source("functions/markdown.R", encoding = "UTF-8")
source("functions/opening-hours.R", encoding = "UTF-8")
source("functions/imports/functions.R", encoding = "UTF-8")
f_debut <- f %>% filter(!is.na(GEOM_DEBUT) & GEOM_DEBUT != "")
f_fin   <- f %>% filter(!is.na(GEOM_FIN) & GEOM_FIN != "")
f_debut
f_fin
coords_debut <- f_debut$GEOM_DEBUT
coords_debut
coords_debut <- f_debut$GEOM_DEBUT
coords_debut <- gsub("[", "", coords_debut)
coords_debut <- gsub("]", "", coords_debut)
coords_debut <- f_debut$GEOM_DEBUT
coords_debut <- gsub("[", "", coords_debut)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]]
coords_debut
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both")
coords_debut
coords_debut <- f_debut$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both")
coords_debut
coords_debut <- f_debut$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both") %>% as.numeric
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both") %>% as.numeric
st_point(coords_debut)
st_geometry(f_debut) <- st_point(coords_debut)
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- strsplit(coords_debut, ",")[[1]] %>% trimws(which = "both") %>% as.numeric
st_geometry(f_debut) <- st_point(coords_debut)
f_debut
st_point(coords_debut)
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
strsplit(coords_debut, ",")
strsplit(coords_debut, ",") %>% trimws(which = "both") %>% as.numeric
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- sapply(1:nrow(coords_debut), function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- rbind(f_debut$GEOM_DEBUT, f_debut$GEOM_DEBUT)
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- sapply(1:nrow(coords_debut), function(x) strsplit(coords_debut[x, ], ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
st_geometry(f_debut) <- st_point(coords_debut)
coords_debut
lapply(coords_debut, function(x) st_point(x))
coords_debut
nrow(coords_debut)
lapply(1:nrow(coords_debut), function(x) st_point(coords_debut[x, ]))
st_sfc(lapply(1:nrow(coords_debut), function(x) st_point(coords_debut[x, ])))
st_geometry(f_debut) <- st_sfc(lapply(1:nrow(coords_debut), function(x) st_point(coords_debut[x, ])))
st_sfc(lapply(1:nrow(coords_debut), function(x) st_point(coords_debut[x, ])))
nrow(f_debut)
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- sapply(1:nrow(coords_debut), function(x) strsplit(coords_debut[x, ], ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- sapply(1:nrow(coords_debut), function(x) strsplit(coords_debut[x, ], ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
coords_debut
sapply(1:nrow(coords_debut), function(x) strsplit(coords_debut[x, ], ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
nrow(coords_debut)
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut
coords_debut <- sapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
coords_debut
lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric)
coords_debut
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
coords_debut <- lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
coords_debut
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
geom_debut <- lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
st_geometry(f_debut) <- geom_debut
geom_debut
f <- rbind(f_debut, f_debut)
coords_debut <- f$GEOM_DEBUT
coords_debut <- gsub("\\[", "", coords_debut)
coords_debut <- gsub("\\]", "", coords_debut)
geom_debut <- lapply(coords_debut, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
st_geometry(f) <- geom_debut
f <- rbind(f_debut, f_debut)
get_points <- function(f, field) {
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
geom <- lapply(coords, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
st_geometry(f) <- geom
return(f)
}
get_points(f, "GEOM_DEBUT")
get_points(f, "GEOM_FIN")
get_points <- function(f, field) {
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
geom <- lapply(coords, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
st_geometry(f) <- geom
return(f)
}
f_debut <- get_points(f, "GEOM_DEBUT")
f_fin <- get_points(f, "GEOM_FIN")
f_debut
library(tidyverse)
library(sf)
source("load-libraries.R", encoding = "UTF-8")
source("../functions/functions.R", encoding = "UTF-8")
source("../functions/geocode.R", encoding = "UTF-8")
source("../functions/markdown.R", encoding = "UTF-8")
source("../functions/opening-hours.R", encoding = "UTF-8")
source("../functions/imports/groum-groum/functions.R", encoding = "UTF-8")
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
class(f)
nrow(f)
st_geometry_type(f) %>% table
st_write(f, "../outputs/arrete-cassis2.geojson")
f_debut <- f %>% filter(!is.na(GEOM_DEBUT) & GEOM_DEBUT != "")
f_fin   <- f %>% filter(!is.na(GEOM_FIN) & GEOM_FIN != "")
f_debut
f_fin
f <- rbind(f_debut, f_debut)
get_points <- function(f, field) {
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
geom <- lapply(coords, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
st_geometry(f) <- geom
return(f)
}
f_debut <- get_points(f, "GEOM_DEBUT")
f_fin   <- get_points(f, "GEOM_FIN")
f_debut %>% st_coordinates
f_fin   %>% st_coordinates
f$GEOM_DEBUT
f$GEOM_FIN
field <- "GEOM_DEBUT"
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
coords
field <- "GEOM_FIN"
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
coords
get_points <- function(f, field) {
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
geom <- lapply(coords, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
print(geom)
st_geometry(f) <- geom
return(f)
}
f_debut <- get_points(f, "GEOM_DEBUT")
f_fin   <- get_points(f, "GEOM_FIN")
f_debut %>% st_coordinates
f_fin   %>% st_coordinates
get_points <- function(f, field) {
f <- f[which(!is.na(f[[field]]) & f[[field]] != ""), ]
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
geom <- lapply(coords, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
print(geom)
st_geometry(f) <- geom
return(f)
}
f_debut <- get_points(f, "GEOM_DEBUT")
f_fin   <- get_points(f, "GEOM_FIN")
f_debut %>% st_coordinates
f_fin   %>% st_coordinates
library(tidyverse)
library(sf)
source("load-libraries.R", encoding = "UTF-8")
source("../functions/functions.R", encoding = "UTF-8")
source("../functions/geocode.R", encoding = "UTF-8")
source("../functions/markdown.R", encoding = "UTF-8")
source("../functions/opening-hours.R", encoding = "UTF-8")
source("../functions/imports/groum-groum/functions.R", encoding = "UTF-8")
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
class(f)
nrow(f)
st_geometry_type(f) %>% table
st_write(f, "../outputs/arrete-cassis2.geojson")
st_write(f, "../temp/arrete-cassis2.geojson", delete_dsn = TRUE)
library(tidyverse)
library(sf)
source("load-libraries.R", encoding = "UTF-8")
source("../functions/functions.R", encoding = "UTF-8")
source("../functions/geocode.R", encoding = "UTF-8")
source("../functions/markdown.R", encoding = "UTF-8")
source("../functions/opening-hours.R", encoding = "UTF-8")
source("../functions/imports/groum-groum/functions.R", encoding = "UTF-8")
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
class(f)
nrow(f)
st_geometry_type(f) %>% table
st_write(f, "../temp/arrete-cassis2.geojson", delete_dsn = TRUE)
get_points <- function(f, field) {
f <- f[which(!is.na(f[[field]]) & f[[field]] != ""), ]
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
geom <- lapply(coords, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
print(geom)
st_geometry(f) <- geom
return(f)
}
f_debut <- get_points(f, "GEOM_DEBUT")
f_fin   <- get_points(f, "GEOM_FIN")
f_debut %>% st_coordinates
f_fin   %>% st_coordinates
library(tidyverse)
library(sf)
source("load-libraries.R", encoding = "UTF-8")
source("../functions/functions.R", encoding = "UTF-8")
source("../functions/geocode.R", encoding = "UTF-8")
source("../functions/markdown.R", encoding = "UTF-8")
source("../functions/opening-hours.R", encoding = "UTF-8")
source("../functions/imports/groum-groum/functions.R", encoding = "UTF-8")
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
class(f)
nrow(f)
st_geometry_type(f) %>% table
st_write(f, "../temp/arrete-cassis2.geojson", delete_dsn = TRUE)
get_points <- function(f, field) {
f <- f[which(!is.na(f[[field]]) & f[[field]] != ""), ]
coords <- f[[field]]
coords <- gsub("\\[", "", coords)
coords <- gsub("\\]", "", coords)
geom <- lapply(coords, function(x) strsplit(x, ",")[[1]] %>% trimws(which = "both") %>% as.numeric %>% st_point) %>% st_sfc
print(geom)
st_geometry(f) <- geom
return(f)
}
f_debut <- get_points(f, "GEOM_DEBUT")
f_fin   <- get_points(f, "GEOM_FIN")
f_debut %>% st_coordinates
f_fin   %>% st_coordinates
st_write(f_debut, "../outputs/debuts.gpkg")
st_write(f_fin, "../outputs/fins.gpkg")
library(sf)
library(tidyverse)
library(sf)
source("load-libraries.R", encoding = "UTF-8")
source("../functions/functions.R", encoding = "UTF-8")
source("../functions/geocode.R", encoding = "UTF-8")
outputSptial <- "test/myfile.geojson"
outputSpatial =outputSptial
gsub(".*\\.(.+)", "\\1", outputSpatial)
basename(outputSpatial)
gsub("(.*)\\.(.+)", "\\1", basename(outputSpatial))
fileName <- gsub("(.*)\\.(.+)", "\\1", basename(outputSpatial))
fileName <- gsub("(.*)\\.(.+)", "\\1", basename(outputSpatial))
extension <- gsub("(.*)\\.(.+)", "\\2", basename(outputSpatial))
fileName
extension
dirName <- dirname(outputSpatial)
dirName
dirName <- dirname(outputSpatial)
fileName <- gsub("(.*)\\.(.+)", "\\1", basename(outputSpatial))
extension <- gsub("(.*)\\.(.+)", "\\2", basename(outputSpatial))
outputPoints <- file.path(dirName, glue("{fileName}-points.{extension}"))
outputLines <- file.path(dirName, glue("{fileName}-lines.{extension}"))
outputPolygons <- file.path(dirName, glue("{fileName}-polygons.{extension}"))
outputPoints
outputLines
outputPolygons
source("../functions/geocode.R", encoding = "UTF-8")
source("../functions/geocode.R", encoding = "UTF-8")
export_spatial(f, "temp/arrete-cassis.geojson", oneFile = FALSE)
source("../functions/geocode.R", encoding = "UTF-8")
export_spatial(f, "../temp/arrete-cassis.geojson", oneFile = FALSE)
source("../functions/geocode.R", encoding = "UTF-8")
export_spatial(f, "../temp/arrete-cassis.geojson", oneFile = FALSE)
source("../functions/geocode.R", encoding = "UTF-8")
export_spatial(f, "../temp/arrete-cassis.geojson", oneFile = FALSE)
st_write(f_points, outputPoints, delete_dsn = TRUE)
outputSpatial = "../temp/arrete-cassis.geojson"
outputSpatial = "../temp/arrete-cassis.geojson"
f_points <- f[grep("POINT", st_geometry_type(f)), ]
f_lines <- f[grep("LINE", st_geometry_type(f)), ]
f_polygons <- f[grep("POLYGON", st_geometry_type(f)), ]
dirName <- dirname(outputSpatial)
fileName <- gsub("(.*)\\.(.+)", "\\1", basename(outputSpatial))
extension <- gsub("(.*)\\.(.+)", "\\2", basename(outputSpatial))
outputPoints <- file.path(dirName, glue("{fileName}-points.{extension}"))
outputLines <- file.path(dirName, glue("{fileName}-lines.{extension}"))
outputPolygons <- file.path(dirName, glue("{fileName}-polygons.{extension}"))
if(nrow(f_points) > 0) {
st_write(f_points, outputPoints, delete_dsn = TRUE)
}
if(nrow(f_lines) > 0) {
st_write(f_lines, outputLines, delete_dsn = TRUE)
}
outputLines
f_lines
st_write(f_lines, outputLines, delete_dsn = TRUE)
f_points
grep("POINT", st_geometry_type(f))
st_geometry_type(f) %>% table
library(tidyverse)
library(sf)
source("load-libraries.R", encoding = "UTF-8")
source("../functions/functions.R", encoding = "UTF-8")
source("../functions/geocode.R", encoding = "UTF-8")
source("../functions/markdown.R", encoding = "UTF-8")
source("../functions/opening-hours.R", encoding = "UTF-8")
source("../functions/imports/groum-groum/functions.R", encoding = "UTF-8")
f <- read_arrete("../data/arrete-cassis-geo4.csv") %>% as_spatial
class(f)
nrow(f)
st_geometry_type(f) %>% table
st_write(f, "../temp/arrete-cassis2.geojson", delete_dsn = TRUE)
source("../functions/geocode.R", encoding = "UTF-8")
export_spatial(f, outputSpatial = "../temp/arrete-cassis.geojson", oneFile = FALSE)
f_points <- f[grep("POINT", st_geometry_type(f)), ]
f_lines <- f[grep("LINE", st_geometry_type(f)), ]
f_polygons <- f[grep("POLYGON", st_geometry_type(f)), ]
f_points
f_lines
f_polygons
dirName <- dirname(outputSpatial)
fileName <- gsub("(.*)\\.(.+)", "\\1", basename(outputSpatial))
extension <- gsub("(.*)\\.(.+)", "\\2", basename(outputSpatial))
outputPoints <- file.path(dirName, glue("{fileName}-points.{extension}"))
outputLines <- file.path(dirName, glue("{fileName}-lines.{extension}"))
outputPolygons <- file.path(dirName, glue("{fileName}-polygons.{extension}"))
if(nrow(f_points) > 0) {
st_write(f_points, outputPoints, delete_dsn = TRUE)
}
setwd("notebooks")
if(nrow(f_points) > 0) {
st_write(f_points, outputPoints, delete_dsn = TRUE)
}
if(nrow(f_lines) > 0) {
st_write(f_lines, outputLines, delete_dsn = TRUE)
}
if(nrow(f_polygons) > 0) {
st_write(f_polygons, outputPolygons, delete_dsn = TRUE)
}
source("../functions/geocode.R", encoding = "UTF-8")
export_spatial(f, outputSpatial = "../temp/arrete-cassis.geojson", oneFile = FALSE)
